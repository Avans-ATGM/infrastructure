---
# Python 3 support
pip_virtualenv_command: /usr/bin/python3 -m virtualenv # usegalaxy_eu.certbot, usegalaxy_eu.tiaas2, galaxyproject.galaxy
certbot_virtualenv_package_name: python3-virtualenv    # usegalaxy_eu.certbot
pip_package: python3-pip                               # geerlingguy.pip

# PostgreSQL
postgresql_objects_users:
  - name: galaxy
  - name: telegraf
postgresql_objects_databases:
  - name: galaxy
    owner: galaxy
postgresql_objects_privileges:
  - database: galaxy
    roles: telegraf
    privs: SELECT
    objs: ALL_IN_SCHEMA

# PostgreSQL Backups
postgresql_backup_dir: /data/backups
postgresql_backup_local_dir: "{{ '~postgres' | expanduser }}/backups"

# Galaxy
galaxy_create_user: true
galaxy_separate_privileges: true
galaxy_manage_paths: true
galaxy_layout: root-dir
galaxy_root: /srv/galaxy
galaxy_user: {name: galaxy, shell: /bin/bash}
galaxy_commit_id: release_20.09
galaxy_config_style: yaml
galaxy_force_checkout: true

miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: "4.7.12"
miniconda_manage_dependencies: false

galaxy_config:
  galaxy:
    brand: "ðŸ§¬ATGMðŸ”¬"
    admin_users: es.rasche@avans.nl
    database_connection: "postgresql:///galaxy?host=/var/run/postgresql"
    file_path: /data
    check_migrate_tools: false
    tool_data_path: "{{ galaxy_mutable_data_dir }}/tool-data"
    job_config_file: "{{ galaxy_config_dir }}/job_conf.xml"
    job_metrics_config_file: "{{ galaxy_config_dir }}/job_metrics_conf.xml"
    id_secret: "{{ id_secret }}"
    tool_data_table_config_path: /cvmfs/data.galaxyproject.org/byhand/location/tool_data_table_conf.xml,/cvmfs/data.galaxyproject.org/managed/location/tool_data_table_conf.xml
    object_store_store_by: uuid
    dependency_resolvers_config_file: "{{ galaxy_config_dir }}/dependency_resolvers_conf.xml"
    containers_resolvers_config_file: "{{ galaxy_config_dir }}/container_resolvers_conf.xml"
    statsd_host: localhost
    statsd_influxdb: true
    # todo: GAT
    aws_estimate: true
    allow_path_paste: true
    database_engine_option_server_side_cursors: true
    slow_query_log_threshold: 5
    enable_per_request_sql_debugging: true
    watch_tools: 'auto'
    watch_job_rules: 'auto'
    nginx_x_accel_redirect_base: /_x_accel_redirect
    sanitize_all_html: false
    serve_xss_vulnerable_mimetypes: true
    library_import_dir: /data/library
    show_welcome_with_login: true
    expose_user_name: true
    enable_quotas: true
    expose_dataset_path: true
    expose_potentially_sensitive_job_metrics: true
    outputs_to_working_directory: true
    cleanup_job: onerror
    allow_user_deletion: true
    allow_user_impersonation: true
  uwsgi:
    socket: 127.0.0.1:8080
    buffer-size: 16384
    processes: 1
    threads: 4
    offload-threads: 2
    static-map:
      - /static={{ galaxy_server_dir }}/static
      - /favicon.ico={{ galaxy_server_dir }}/static/favicon.ico
    static-safe: client/galaxy/images
    master: true
    virtualenv: "{{ galaxy_venv_dir }}"
    pythonpath: "{{ galaxy_server_dir }}/lib"
    module: galaxy.webapps.galaxy.buildapp:uwsgi_app()
    thunder-lock: true
    die-on-term: true
    hook-master-start:
      - unix_signal:2 gracefully_kill_them_all
      - unix_signal:15 gracefully_kill_them_all
    py-call-osafterfork: true
    enable-threads: true
    mule:
      - lib/galaxy/main.py
      - lib/galaxy/main.py
    farm: job-handlers:1,2

galaxy_config_templates:
  - src: templates/galaxy/config/job_metrics_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.job_metrics_config_file }}"
  - src: templates/galaxy/config/job_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.job_config_file }}"
  - src: templates/galaxy/config/container_resolvers_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.containers_resolvers_config_file }}"
  - src: templates/galaxy/config/welcome.html
    dest: "{{ galaxy_config_dir }}/welcome.html"

galaxy_config_files:
- src: files/galaxy/config/dependency_resolvers_conf.xml
  dest: "{{ galaxy_config.galaxy.dependency_resolvers_config_file }}"

# systemd
galaxy_systemd_mode: mule
galaxy_zergpool_listen_addr: 127.0.0.1:8080
galaxy_restart_handler_name: "Restart Galaxy"

# NGINX
nginx_selinux_allow_local_connections: true
nginx_servers:
  - galaxy
nginx_enable_default_server: false
nginx_conf_http:
  client_max_body_size: 1g

# Jenkins
jenkins_http_port: 4000
jenkins_admin_username: admin
# Please change at least the password to something more suitable
jenkins_admin_password: "{{ jenkins_password }}"
jenkins_url_prefix: /jenkins
jenkins_plugins:
- matrix-auth
- shiningpanda
- git
- credentials-binding
- simple-theme-plugin
- embeddable-build-status

# OS env
os_desktop_enable: true
os_env_umask: "022"
os_auth_pw_max_age: 99999
os_auth_retries: 10

# HTCondor
condor_host: "galaxy.bioinformatics-atgm.nl"
condor_allow_write: "*.bioinformatics-atgm.nl"
condor_roles:
    - execute
    - central-manager
    - submit
condor_allow_negotiator: '$(ALLOW_WRITE)'
condor_allow_administrator: "$(ALLOW_WRITE)"
condor_network_interface: "{{ ansible_default_ipv4.interface }}"
condor_fs_domain: bioinformatics-atgm.nl
condor_uid_domain: bioinformatics-atgm.nl
condor_trust_uid_domain: 'True'
condor_extra: |
    SLOT_TYPE_1 = cpus=1, ram=4
    NUM_SLOTS_TYPE_1 = 24
    COLLECTOR_NAME = "ATGM Cluster"
    CGROUP_MEMORY_LIMIT_POLICY = soft

# Monitoring
custom_telegraf_env: "/usr/bin/env GDPR_MODE=1 PGUSER=galaxy GALAXY_ROOT=/srv/galaxy/server GALAXY_CONFIG_FILE=/srv/galaxy/config/galaxy.yml GXADMIN_PYTHON=/srv/galaxy/venv/bin/python"
telegraf_plugins_extra:
  listen_galaxy_routes:
    plugin: "statsd"
    config:
      - service_address = ":8125"
      - metric_separator = "."
      - allowed_pending_messages = 10000

  monitor_galaxy_queue:
    plugin: "exec"
    config:
      - commands = ["/usr/bin/env PGDATABASE=galaxy /usr/local/bin/gxadmin iquery queue-overview --short-tool-id"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "15s"

  postgres:
    plugin: "postgresql"
    config:
      - address = "{{ galaxy_config.galaxy.database_connection }}"
      - databases = ["galaxy", "galaxy-test", "apollo", "chado"]

  monitor_condor_queue:
    plugin: "exec"
    config:
      - commands = ["sudo /usr/bin/monitor-condor-queue"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "1m"

  #monitor_nfsstat:
    #plugin: "exec"
    #config:
      #- commands = ["/usr/bin/nfsstat-influx"]
      #- timeout = "10s"
      #- data_format = "influx"
      #- interval = "15s"

  # Some custom galaxy monitoring stuff
  galaxy_uploaded:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery upload-gb-in-past-hour"]
      - timeout = "60s"
      - data_format = "influx"
      - interval = "1h"
  galaxy_lastlog:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin uwsgi lastlog"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "15s"
  galaxy_jobs_queued:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery jobs-queued"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_jobs_queued_internal:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery jobs-queued-internal-by-handler"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_workflow:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery workflow-invocation-status"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_workflow_totals:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery workflow-invocation-totals"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_active_users:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin uwsgi active-users"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"

  postgres_extra:
    plugin: "exec"
    config:
      - commands = [
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-cache-hit",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-index-size",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-index-usage",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-table-bloat",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-table-size",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-unused-indexes",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-vacuum-stats",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-stat-bgwriter",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-stat-user-tables",
        ]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"

monitor_condor: true
monitor_condor_split_util: true
