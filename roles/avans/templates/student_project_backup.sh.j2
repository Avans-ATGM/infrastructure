#!/bin/sh

exit_needed=$(False)
{% for project in atgm_projects %}
    {% if project.host == ansible_nodename %}

        exit_needed=$(True)
        set -e

        # go to directory needed to be backedup
        cd {{ hostvars[project.host].project_directory }}/{{ project.year }}/{{ project.name }}/data_storage$

        # See the section "Passphrase notes" for more infos.
        #where it will be stored
        export BORG_REPO={{ hostvars[project.host].backup_user }}@{{ hostvars[project.host].backup_host}}:{{ hostvars[project.host].backup_location}}

        export BORG_PASSPHRASE={{.vault_password}}
        # some helpers and error handling:
        info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
        trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

        info "Starting backup"

        # Backup the most important directories into an archive named after
        # the machine this script is currently running on:

        borg create \
            --verbose                                         \
            --list                                            \
            --stats                                           \
            --show-rc                                         \
            --compression lz4                                 \
            --exclude-caches                                  \
            ::docs-$(date "+%Y-%m-%dT%H-%M-%S") \
            # we backup all in the data storage directory
            *

        backup_exit=$?

        info "Pruning repository"

        # Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
        # archives of THIS machine. The '{hostname}-' prefix is very important to
        # limit prune's operation to this machine's archives and not apply to
        # other machines' archives also:

        borg prune                 \
            --remote-path=borg1    \
            --list                 \
            --prefix 'docs-' \
            --show-rc              \
            --keep-daily    1      \
            --keep-weekly   1      \
            --keep-monthly  6

        prune_exit=$?

        # use highest exit code as global exit code
        global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

        if [ ${global_exit} -eq 0 ]; then
            info "Backup and Prune finished successfully"
        elif [ ${global_exit} -eq 1 ]; then
            info "Backup and/or Prune finished with warnings"
        else
            info "Backup and/or Prune finished with errors"
        fi

        info ${global_exit}

    {% endif%}
{%endfor%}

{% if exit_needed == True %}
    exit
{%endif%}